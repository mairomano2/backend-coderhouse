paths:
  /api/products:
    get:
      summary: Get all products from the DB
      responses: 
        "200": 
          description: Products fetched successfully
          content: application/json
          schema:
            $ref: "#components/schema/allProductsResponse"
        "500":
          description: Internal server error

    post:
      summary: Create a new product and add it to the DB
      responses:
        "200":
          description: Â¨Product created successfully
          content: 
            schema:
              $ref: "#components/schema/oneProductResponse"
        "400":
          description: Missing fields
        "500":
          description: Internal server error

  /api/products/{productId}:
    get:
      summary: Get one product acording to their id
      parameters: 
        - name: productId
        - in: path
        - required: true
        - description: product id to fetch
        - schema:
          type: string
      responses:
        "200":
          description: product from the DB with the given id
          content: application/json
          response: 
            $ref: "#components/schema/oneProductResponse"
        "404": 
          description: The product with the given id wasn't found
        "500":
          description: Internal server error

    put:
      summary: Updates a product's data with the given id
      parameters: 
        name: productId
        in: path
        required: true
        description: product id to fetch
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#components/requestBodies/updateProductPayload"
      responses:
        "200":
          description: product from the DB with the given id
          content: application/json
          response: 
            $ref: "#components/schema/oneProductResponse"
        "400":
          description: invalid body format
        "404": 
          description: The product with the given id wasn't found
        "500":
          description: Internal server error
      
    delete:
      summary: Delete a product from the DB with the given id
      parameters:
        name: productId
        in: path
        required: true
        description: Product id to fetch
        schema:
          $type: string
      responses: 
        "200":
          description: Product from the DB with the given id
          content: application/json
          response:
            $ref: "#components/schema/oneProductResponse"
        "404":
          description: The product with the given id wasn't found
        "500":
          description: Internal server error

components:
  schema:
    product:
      type: object
      properties:
        _id:
          type: ObjectId
          description: Mongo DB autogenerated id
        title:
          type: string
          description: Product's title
        description:
          type: string
          description: Product's description
        code:
          type: string
          description: Product's unique code
        price:
          type: number
          description: Product's price
        status:
          type: Boolean
          description: Product's status (acrtive or disable)
        stock:
          type: number
          description: Product's stock number
        category:
          type: string
          description: Product's category
        thumbnail: 
          type: array
          description: Product's thumbnails
      example:
        id: ObjectId
        title: string
        description: string
        code: string
        price: number
        status: Boolean
        stock: number
        category: string
        thumbnails: array

    allProductsResponse:
      type: object
      properties:
        status:
          type: string
          enum: [success, error]
          description: Products response status
        payload:
          type: array
          description: Products array list
          items: 
            $ref: "#components/schema/product"

    oneProductResponse:
      type: object
      properties: 
        status: 
          type: string
          enum: [success, error]
          description: Product response status
        payload: 
          type: object
          description: Product information
          items:
            $ref: "#components/schema/product"

  requestBodies:
    updateProductPayload:
      type: object
      properties:
        title:
          type: string
          description: Product's title
        description:
          type: string
          description: Product's description
        price:
          type: number
          description: Product's price
        status:
          type: Boolean
          description: Product's status (acrtive or disable)
        stock:
          type: number
          description: Product's stock number
        category:
          type: string
          description: Product's category
        thumbnail: 
          type: array
          description: Product's thumbnails
      example:
        id: ObjectId
        title: string
        description: string
        code: string
        price: number
        status: Boolean
        stock: number
        category: string
        thumbnails: array

        