# aca se definen rutas
paths: 
 /api/users:
  get:
    tags: 
      - Users # el - se usa para indicar que es un array
    summary: Get all the users from the DB
    responses: 
      "200": 
        description: Users feched successfully
        content: application/json
          schema: 
            $ref: "#components/shcema/allUsersResponse"
      "500":
        description: Internal server error

  post:
    tags: 
      - Users
    sumarry: Create a new user and add it to de DB
    responses: 
      "200":
        description: User created successfully
        content: 
          schema: 
            $ref: "#components/schema/user"
      "400":
        description: Missing fields
      "500":
        description: Internal server error

 /api/users/{userId}:
  get:
    summary: Get one user acording to their id
    tags: - Users
    parameters: 
      - name: userId
        in: path #de donde viene el parametro(body, path, query, etc)
        required: true
        description: user id to fetch
        schema: 
          type: string
    responses:
      "200":
        description: user from the DB with the given id
        content: application/json
        response: 
          $ref: "#/components/schema/singleUserResponse"
      "404": 
        description: The user with the given id wasn't found
      "500":
        description: Internal server error
        
  put: 
    summary: updates a users's data with the given id
    tags: - Users
    parameters:
      - name: userId
        in: path #de donde viene el parametro(body, path, query, etc)
        required: true
        description: user id to fetch
        schema: 
          type: string
    requestBody:
      required: true
      content: 
        application/json:
          schema: 
            $ref: "#components/requestBodies/updateUserPayload"
    responses:
      "200":
        description: updated user with the given id
        constent: application/json
        response: 
          $ref: "#components/schema/singleUserResponse"
      "400":
        description: invalid body format
      "404": 
        description: the user with the given id wasn't found
      "500":
        description: internal server error

  delete:
    summary: Delete a user from the DB with the given id
    tags: - User
    parameters:
      - name: userId
        in: path
        required: true
        description: user id to fetch
        schema: 
          type: string
    responses:
      "200":
        description: user from the DB with the given id
        constent: application/json
        response: 
          $ref: "#components/schema/singleUserResponse"
      "404": 
        description: the user with the given id wasn't found
      "500":
        description: internal server error    

# aca se definen los schemas de cada componente de respuesta
components: 

  schema:

    user:
      type: object
      properties:
        _id:
          type: objectId
          description: Mongo DB autogenerated id
        firstName: 
          type: string
          description: User's first name
        lastName: 
          type: string
          description: User's last name
        age: 
          type: number
          description: User's age
        email: 
          type: string
          description: User's email
          required: true
        password: 
          type: string
          description: User's hashed password
        githubUsername: 
          type: string
          description: User's github account
        role: 
          type: string
          description: User's role 
          enum: [admin, premium, user]

      example: 
        _id: ewhe4rt56y16egwf34
        firstName: string
        lastName: string
        age: number
        email: string
        password: string
        githubUsername: string
        role: array

    allUsersResponse: 
      type: object
      properties: 
        status: 
          type: string
          enum: [sucess, error]
          description: Users response status
        payload:
          type: array
          description: Users array list
          items: 
          # el href hace referencia a algo. va con "#" para hacer referencia a algo de este mismo doc
            $ref: "#/components/schema/user"

    singleUserResponse:
      type: object
      properties: 
        status: 
          type: string
          enum: [sucess, error]
          description: User response status
        payload:
          type: object
          description: Users information
          properties: 
          # el href hace referencia a algo. va con "#" para hacer referencia a algo de este mismo doc
            $ref: "#/components/schemas/user"

  requestBodies:
    updateUserPayload:
      type: object
      properties:
      
        firstName: 
          type: string
          description: User's first name
        lastName: 
          type: string
          description: User's last name
        age: 
          type: number
          description: User's age
        password: 
          type: string
          description: User's hashed password
        githubUsername: 
          type: string
          description: User's github account
        role: 
          type: string
          description: User's role 
          enum: [admin, premium, user]

      example: 
        _id: ewhe4rt56y16egwf34
        firstName: string
        lastName: string
        age: number
        email: string
        password: string
        githubUsername: string
        role: array